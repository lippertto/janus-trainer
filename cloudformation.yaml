AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  JanusEnvironment:
    Type: String
    AllowedValues: ['dev', 'test', 'prod']
    Description: >-
      For which environment you want to create the infrastructure.
      The value will be used as suffix to the resources.
  JanusDomain:
    Type: String
    Description: Under which domain the app will be hosted.

Resources:
  JanusUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Join ['-', ['janus-trainer-pool', !Ref JanusEnvironment]]
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: True
        InviteMessageTemplate:
          EmailMessage: !Sub |
            Liebe Übungsleitung, für dich wurde ein Konto für die Janus Online Trainings Abrechnungen (JOTA) erstellt.
            Dein Account hat die email {username}, dein temporäres Passwort ist "{####}" ohne Anführungszeichen.
            Du musst es beim ersten Einloggen ändern.
            Das temporäre Passwort ist für eine Woche gültig.
            Du findest die App unter https://${JanusDomain}
            Sportliche Grüße Dein SC Janus.
          EmailSubject: 'Neues Konto für die Janus Online Trainings Abrechnungen (JOTA)'
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
  JanusUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Join ['-', ['janus-trainer-app', !Ref JanusEnvironment]]
      UserPoolId: !Ref JanusUserPool
  JanusUserPoolGroupAdmins:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: admins
      UserPoolId: !Ref JanusUserPool
  JanusUserPoolGroupTrainers:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: trainers
      UserPoolId: !Ref JanusUserPool

  TobiasAccount:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      UserPoolId: !Ref JanusUserPool
      Username: ltrd@fastmail.fm
    DependsOn: JanusUserPool
  TobiasIsAdmin:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties:
      GroupName: !Ref JanusUserPoolGroupAdmins
      Username: !Ref TobiasAccount
      UserPoolId: !Ref JanusUserPool
  TobiasIsTrainer:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties:
      GroupName: !Ref JanusUserPoolGroupTrainers
      Username: !Ref TobiasAccount
      UserPoolId: !Ref JanusUserPool

  JanusUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref JanusUserPool
      ClientName: !Join ['-', ['janus-trainer-app', !Ref JanusEnvironment]]
      CallbackURLs:
        - !Sub 'https://${JanusDomain}/api/auth/callback/cognito'
        - http://localhost:3000/api/auth/callback/cognito
        # for backwards compatibility
        - https://janus.lippert.dev/api/auth/callback/cognito
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      AllowedOAuthFlowsUserPoolClient: true
      ReadAttributes:
        - email
        - email_verified
        - name
      WriteAttributes:
        - email
        - name
      PreventUserExistenceErrors: ENABLED
