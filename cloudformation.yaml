AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  JanusEnvironment:
    Type: String
    AllowedValues: ['dev', 'test', 'prod']
    Description: >-
      For which environment you want to create the infrastructure.
      The value will be used as suffix to the resources.
  JanusDomain:
    Type: String
    Description: Under which domain the app will be hosted.

Mappings:
  Constants:
    ManagedPolicyIds:
      CachingDisabled: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
      CachingOptimized: 658327ea-f89d-4fab-a63d-7e88639e58f6
      AllViewer: 216adef6-5c7f-47e4-b989-5492eafa07d3
      AllViewerExceptHostHeader: b689b0a8-53d0-40ab-baf2-68738e2966ac

Resources:
  JanusUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Join ['-', ['janus-trainer-pool', !Ref JanusEnvironment]]
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: True
        InviteMessageTemplate:
          EmailMessage: !Sub |
            Hallo, ein Konto in der Janus Trainer App wurde für dich erstellt.
            Dein Account hat die email {username}, dein temporäres Passwort ist "{####}" ohne Anführungszeichen.
            Du musst es beim ersten Einloggen ändern.
            Du findest die App unter https://${JanusDomain} Sportliche Grüße Dein SC Janus.
          EmailSubject: 'Neues Konto in der Janus Trainer App'
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
  JanusUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Join ['-', ['janus-trainer-app', !Ref JanusEnvironment]]
      UserPoolId: !Ref JanusUserPool
  JanusUserPoolGroupAdmins:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: admins
      UserPoolId: !Ref JanusUserPool
  JanusUserPoolGroupTrainers:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: trainers
      UserPoolId: !Ref JanusUserPool

  TobiasAccount:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      UserPoolId: !Ref JanusUserPool
      Username: ltrd@fastmail.fm
    DependsOn: JanusUserPool
  TobiasIsAdmin:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties:
      GroupName: !Ref JanusUserPoolGroupAdmins
      Username: !Ref TobiasAccount
      UserPoolId: !Ref JanusUserPool
  TobiasIsTrainer:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties:
      GroupName: !Ref JanusUserPoolGroupTrainers
      Username: !Ref TobiasAccount
      UserPoolId: !Ref JanusUserPool

  JanusUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref JanusUserPool
      ClientName: !Join ['-', ['janus-trainer-app', !Ref JanusEnvironment]]
      CallbackURLs:
        - !Sub 'https://${JanusDomain}/api/auth/callback/cognito'
        - http://localhost:3000/api/auth/callback/cognito
        - https://janus-hetzner.lippert.dev/api/auth/callback/cognito
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      AllowedOAuthFlowsUserPoolClient: true
      ReadAttributes:
        - email
        - email_verified
        - name
      WriteAttributes:
        - email
        - name
      PreventUserExistenceErrors: ENABLED

  JanusTrainerAppRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'JanusTrainerAppRole-${JanusEnvironment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  JanusTrainerAppRolePolicy:
    Type: AWS::IAM::RolePolicy
    Properties:
      RoleName: !Ref JanusTrainerAppRole
      PolicyName: !Sub 'JanusTrainerAppPolicy-${JanusEnvironment}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: Statement01
            Effect: Allow
            Action:
              - cognito-idp:AdminCreateUser
              - cognito-idp:AdminDisableUser
              - cognito-idp:AdminEnableUser
              - cognito-idp:AdminGetUser
              - cognito-idp:AdminAddUserToGroup
              - cognito-idp:AdminRemoveUserFromGroup
              - cognito-idp:AdminDeleteUserAttributes
              - cognito-idp:AdminUpdateUserAttributes
              - cognito-idp:AdminListGroupsForUser
              - cognito-idp:ListGroups
              - cognito-idp:GetGroup
              - cognito-idp:ListUsersInGroup
              - cognito-idp:ListUsers
              - cognito-idp:GetUser
            Resource: !GetAtt JanusUserPool.Arn
