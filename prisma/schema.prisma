generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_CONNECTION_URL")
}

model Holiday {
  id    Int    @id @default(autoincrement())
  name  String
  // date in iso 8601
  start String
  // date in iso 8601
  end   String
}

enum TrainingStatus {
  NEW
  APPROVED
  COMPENSATED
}

model Training {
  id                Int    @id @default(autoincrement())
  // date in iso 8601
  date              String
  // cents
  compensationCents Int

  createdAt DateTime

  participantCount Int

  status TrainingStatus

  course   Course @relation(fields: [courseId], references: [id])
  courseId Int

  user   UserInDb @relation(fields: [userId], references: [id])
  userId String

  payment   Payment? @relation(fields: [paymentId], references: [id])
  paymentId Int?
}

// The user in the database is only part of the domain object.
// The groups and the email are stored in cognito.
model UserInDb {
  // This is an external id, in our case cognito
  id                 String              @id
  iban               String?
  name               String
  deletedAt          DateTime?
  trainings          Training[]
  courses            Course[]
  compensationGroups CompensationGroup[] @default([])

  termsAcceptedAt      DateTime? @db.Timestamptz()
  termsAcceptedVersion String?

  payments Payment[]

  // We want the table to be called User
  @@map("User")
}

enum CompensationGroup {
  WITH_QUALIFICATION
  NO_QUALIFICATION
  LEAGUE
}

model CompensationValue {
  id                Int               @id @default(autoincrement())
  cents             Int
  description       String
  durationMinutes   Int?
  compensationGroup CompensationGroup
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Course {
  id              Int         @id @default(autoincrement())
  name            String
  weekdays        DayOfWeek[]
  startHour       Int
  startMinute     Int
  durationMinutes Int

  discipline   Discipline? @relation(fields: [disciplineId], references: [id])
  disciplineId Int?

  trainers  UserInDb[]
  trainings Training[]
}

model Discipline {
  id           Int      @id @default(autoincrement())
  name         String
  costCenterId Int
  Course       Course[]
}

model Payment {
  id Int @id @default(autoincrement())

  createdAt DateTime

  createdBy   UserInDb @relation(fields: [createdById], references: [id])
  createdById String

  trainings Training[]
}
