name: janus-trainer-app
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Enable Corepack
        run: corepack enable
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: yarn
      - name: yarn install
        run: yarn install
      - name: yarn format
        run: yarn format
  run-e2e-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Enable Corepack
        run: corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: yarn
      - run: docker compose up -d
      - run: yarn install
      - run: yarn build
      - name: create environment
        run: cp .env.development .env
      - run: yarn prisma db push
      - run: yarn prisma db seed
      - run: yarn start:dev &
        env:
          POSTGRES_PASSWORD: postgress
      - name: Install Playwright Browsers
        run: yarn playwright install firefox --with-deps
      - name: Run Playwright tests
        run: yarn playwright:test
        env:
          COGNITO_ADMIN_USERNAME: ${{ vars.COGNITO_ADMIN_USERNAME }}
          COGNITO_ADMIN_PASSWORD: ${{ secrets.COGNITO_ADMIN_PASSWORD }}
          COGNITO_TRAINER_USERNAME: ${{ vars.COGNITO_TRAINER_USERNAME }}
          COGNITO_TRAINER_PASSWORD: ${{ secrets.COGNITO_TRAINER_PASSWORD }}
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright/test-report/
          retention-days: 1

  build:
    if: github.ref_name == 'main'
    uses: ./.github/workflows/build.yaml
    secrets:
      aws-ecr-key: ${{ secrets.AWS_ECR_KEY }}
      aws-ecr-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}

  deploy-prod:
    if: github.ref_name == 'main'
    needs:
      - build
      - lint-and-format
    uses: ./.github/workflows/deploy.yaml
    with:
      image-name: ${{needs.build.outputs.image-name}}
      function-name: 'arn:aws:lambda:eu-north-1:930650061532:function:janus-trainer-app'
      postgres-host: snuffleupagus.db.elephantsql.com
      postgres-database: vudaklvt
      postgres-username: vudaklvt
    secrets:
      aws-ecr-key: ${{ secrets.AWS_ECR_KEY }}
      aws-ecr-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
      postgres-password: ${{ secrets.POSTGRES_PASSWORD_PROD }}
