name: janus-trainer-app
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Enable Corepack
        run: corepack enable
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
      - name: yarn install
        run: yarn install
      - name: yarn format
        run: yarn format
      - name: yarn lint
        run: yarn lint
  run-e2e-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Enable Corepack
        run: corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: "20.x"
      - run: docker compose up -d
      - run: yarn install
      - run: yarn start &
      - run: yarn migration:run:dev
      - name: Install Playwright Browsers
        run: yarn e2e playwright install --with-deps
      - name: create env
        id: create-env
        run: |
          echo COGNITO_DOMAIN=https://janus-trainer-dev.auth.eu-north-1.amazoncognito.com/ > packages/janus-trainer-e2e/.env
      - name: Run Playwright tests
        run: yarn e2e playwright:test
        env:
          COGNITO_ADMIN_USERNAME: ${{ vars.COGNITO_ADMIN_USERNAME }}
          COGNITO_ADMIN_PASSWORD: ${{ secrets.COGNITO_ADMIN_PASSWORD }}
          COGNITO_TRAINER_USERNAME: ${{ vars.COGNITO_TRAINER_USERNAME }}
          COGNITO_TRAINER_PASSWORD: ${{ secrets.COGNITO_TRAINER_PASSWORD }}
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - run: yarn install
      - run: yarn build
      - run: docker compose up -d
      - run: 'yarn backend migration:run:dev'
      - run: yarn start 2>&1 > server.log &


  build-frontend:
    runs-on: ubuntu-latest
    if: github.ref_name == 'main'
    outputs:
      image-name: ${{ steps.push.outputs.image-name }}
    steps:
      - uses: actions/checkout@v4
      - name: Enable Corepack
        run: corepack enable
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push image to Amazon ECR
        id: push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: janus-trainer-frontend
        run: |
          export IMAGE_TAG="$GITHUB_RUN_ID"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo image-name=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG >> $GITHUB_OUTPUT
  deploy-frontend:
    needs:
      - build-frontend
      - lint-and-format
    runs-on: ubuntu-latest
    if: github.ref_name == 'main'
    env:
      IMAGE_NAME: ${{needs.build-frontend.outputs.image-name}}
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
      - name: Deploy backend image to lambda
        run: |
          aws lambda update-function-code \
            --function-name janus-trainer-app \
            --architectures x86_64 \
            --image-uri ${IMAGE_NAME}

  deploy-backend:
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    needs:
      # the build-frontend has a linting step which does more than eslint.
      # To avoid partial deployments due to aborted frontend builds, we add a dependency
      - build-frontend
      - lint-and-format
    steps:
      - uses: actions/checkout@v4
      - name: Enable Corepack
        run: corepack enable
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
      - name: yarn install
        run: yarn install
      - name: build dto libarary
        run: |
          yarn workspace janus-trainer-dto build
      - name: Deploy backend
        env:
          SLS_DEBUG: "*"
        run: |
          yarn workspace janus-trainer-backend deploy
